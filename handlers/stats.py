from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
import logging
from database import update_last_active, get_user_stats, get_test_stats_by_word_set, get_game_stats_by_word_set
from keyboards import main_menu_keyboard
from utils.data_manager import calculate_overall_score_and_rank
from aiogram import Bot # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —è–≤–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ bot
from config import TEST_QUESTIONS_COUNT
import datetime

GAME_NAMES_RU = {
    "choose_translation": "*–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥*",
    "build_word": "*–°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ*",
    "find_missing_letter": "*–ù–∞–π–¥–∏ –±—É–∫–≤—É*", # New game
    "recall_typing": "*–í–≤–æ–¥ –ø–æ –ø–∞–º—è—Ç–∏*", # New game
    "guess_word": "*–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ*", # New game (audio)
}

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤, —á—Ç–æ –∏ –≤ admin.py –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
GAME_NAME_TRANSLATIONS = {
    "guess_word": "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ (–ø–æ –∞—É–¥–∏–æ)",
    "choose_translation": "–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥",
    "build_word": "–°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ",
    "find_missing_letter": "–ù–∞–π–¥–∏ –±—É–∫–≤—É",
    "recall_typing": "–í–≤–æ–¥ –ø–æ –ø–∞–º—è—Ç–∏",
    "test": "–¢–µ—Å—Ç –∑–Ω–∞–Ω–∏–π",
}


router = Router()


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics_handler(message: Message, state: FSMContext, bot: Bot):
    user_id = int(message.from_user.id)
    await update_last_active(user_id)

    user_name_display = message.from_user.username if message.from_user.username else message.from_user.full_name

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_overall_stats = await get_user_stats(user_id)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º
    total_correct_answers = user_overall_stats.get("total_correct_answers", 0)
    best_test_score = user_overall_stats.get("best_test_score", 0)
    best_test_time = user_overall_stats.get("best_test_time", float("inf"))

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    total_correct_answers_display = (
        str(total_correct_answers) if total_correct_answers > 0 else "—Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
    )
    best_test_score_display = (
        f"{best_test_score} –∏–∑ {TEST_QUESTIONS_COUNT}"
        if best_test_score > 0
        else "—Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
    )
    best_test_time_display = (
        f"{best_test_time:.2f} —Å–µ–∫."
        if best_test_time != float("inf") and best_test_time != 999999.0 # Added check for 999999.0
        else "—Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
    )

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º (–¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞)
    total_game_correct = 0
    if "games_stats" in user_overall_stats:
        for game_type, game_data in user_overall_stats["games_stats"].items():
            total_game_correct += game_data.get("correct", 0)

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–û–ö–ü–û)
    overall_correct_answers = total_correct_answers + total_game_correct

    # Calculate ranking
    user_ranks = await calculate_overall_score_and_rank()
    current_user_rank_info = next(
        (u for u in user_ranks if int(u['user_id']) == user_id), None
    )

    rank_text = ""
    if current_user_rank_info:
        rank_text = f"\n‚≠ê *–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {current_user_rank_info['rank']} –º–µ—Å—Ç–æ* (–û—á–∫–∏: {current_user_rank_info['overall_score']:.2f})\n"

    stats_text = f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, {user_name_display}:*\n"
    stats_text += rank_text
    stats_text += f"üèÜ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:* `{overall_correct_answers}`\n"

    # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    last_activity_date_display = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if "last_activity_date" in user_overall_stats and user_overall_stats["last_activity_date"] != "N/A":
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É ISO –≤ –æ–±—ä–µ–∫—Ç datetime
            dt_object = datetime.datetime.fromisoformat(user_overall_stats["last_activity_date"])
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '23.09.2025 20:56')
            last_activity_date_display = dt_object.strftime("%d.%m.%Y %H:%M")
        except ValueError:
            last_activity_date_display = user_overall_stats["last_activity_date"] # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ ISO, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å

    stats_text += f"üïí *–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* `{last_activity_date_display}`\n"

    stats_text += "\nüìù *–¢–µ—Å—Ç –∑–Ω–∞–Ω–∏–π:*\n"
    stats_text += (
        f"   –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: `{total_correct_answers_display}`\n"
        f"   –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: `{best_test_score_display}`\n"
        f"   –õ—É—á—à–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: `{best_test_time_display}`\n\n"
    )

    # === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è ===
    test_stats_by_set = await get_test_stats_by_word_set(user_id)
    if test_stats_by_set:
        stats_text += "üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–æ —Å–ª–æ–≤–∞—Ä—è–º:\n"
        for word_set, stats in test_stats_by_set.items():
            # –£–±—Ä–∞–Ω–∞ –∑–∞–º–µ–Ω–∞ "default" –Ω–∞ "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å", —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ—á–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            display_word_set = word_set 
            
            total_tests = stats.get("total_tests", 0)
            total_score = stats.get("total_score", 0)
            total_possible_score = stats.get("total_possible_score", 0)
            best_score = stats.get("best_score", 0)

            accuracy = (
                (total_score / total_possible_score) * 100
                if total_possible_score > 0
                else 0
            )

            stats_text += f"  ‚îî üìÅ `{display_word_set}`:\n"
            stats_text += f"    ‚Ä¢ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {total_tests}\n"
            stats_text += f"    ‚Ä¢ –û–±—â–∏–π —Å—á–µ—Ç: {total_score} –∏–∑ {total_possible_score} ({accuracy:.2f}%)\n"
            stats_text += f"    ‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_score}\n"
        stats_text += "\n" # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤ –ø–æ —Å–ª–æ–≤–∞—Ä—è–º


    stats_text += "üéÆ *–ò–≥—Ä—ã:*\n"
    # === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ===
    game_stats_by_set = await get_game_stats_by_word_set(user_id)
    if game_stats_by_set:
        for word_set, games in game_stats_by_set.items():
            # –£–±—Ä–∞–Ω–∞ –∑–∞–º–µ–Ω–∞ "default" –Ω–∞ "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å", —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ—á–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            display_word_set = word_set 
            
            stats_text += f"  ‚îî üìÅ `{display_word_set}`:\n"
            for game_type, stats in games.items():
                correct = stats.get("correct", 0)
                played = stats.get("played", 0)
                incorrect = stats.get("incorrect", 0)
                best_time_str = (
                    f" ({stats['best_time']:.2f}—Å)"
                    if stats["best_time"] and stats["best_time"] != float("inf")
                    else ""
                )
                translated_game_name = GAME_NAME_TRANSLATIONS.get(
                    game_type, game_type.replace("_", " ").title()
                )
                stats_text += f"    ‚Ä¢ {translated_game_name}: –í—Å–µ–≥–æ: {played}, –í–µ—Ä–Ω–æ: {correct}, –ù–µ–≤–µ—Ä–Ω–æ: {incorrect}{best_time_str}\n"
        stats_text += "\n" # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä –ø–æ —Å–ª–æ–≤–∞—Ä—è–º


    await message.answer(stats_text, reply_markup=main_menu_keyboard, parse_mode="Markdown")
