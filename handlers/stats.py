from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
import logging
from database import update_last_active
from keyboards import main_menu_keyboard
from utils.data_manager import load_stats, calculate_overall_score_and_rank
from aiogram import Bot # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —è–≤–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ bot
from config import TEST_QUESTIONS_COUNT
import datetime
from utils.audio_cleanup import cleanup_guess_audio

GAME_NAMES_RU = {
    "choose_translation": "*–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥*",
    "build_word": "*–°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ*",
    "find_missing_letter": "*–ù–∞–π–¥–∏ –±—É–∫–≤—É*", # New game
    "recall_typing": "*–í–≤–æ–¥ –ø–æ –ø–∞–º—è—Ç–∏*", # New game
    "guess_word": "*–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ*", # New game (audio)
}

router = Router()

# async def get_formatted_statistics(user_id: str) -> str:
#     logging.info(f"[handlers/stats.py] Getting formatted stats for User ID: {user_id}")
#     all_stats = await load_stats()
#     stats = all_stats.get(user_id)
#
#     if stats:
#         last_activity_date = stats.get('last_activity_date')
#         formatted_last_activity_date = 'N/A'
#         if last_activity_date:
#             try:
#                 last_activity_datetime = datetime.datetime.fromisoformat(last_activity_date)
#                 formatted_last_activity_date = last_activity_datetime.strftime("%d.%m.%y –≤ %H:%M")
#             except ValueError:
#                 formatted_last_activity_date = last_activity_date
#         else:
#             formatted_last_activity_date = last_activity_date
#
#         # Calculate ranking
#         user_ranks = await calculate_overall_score_and_rank()
#         current_user_rank_info = next((u for u in user_ranks if u['user_id'] == user_id), None)
#
#         stats_text = (
#             "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
#             f"‚úÖ –ö–æ–ª-–≤–æ –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–∞—Ö: *{stats.get('total_correct_answers', 0)}*\n"
#             f"üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: *{stats.get('best_test_score', 0)}* –∏–∑ {TEST_QUESTIONS_COUNT}\n"
#             f"üóìÔ∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: *{formatted_last_activity_date}*"
#         )
#
#         if current_user_rank_info:
#             stats_text += (
#                 f"\n\n‚≠ê *–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {current_user_rank_info['rank']} –º–µ—Å—Ç–æ* (–û—á–∫–∏: {current_user_rank_info['overall_score']:.2f})\n"
#             )
#
#         if 'games_stats' in stats:
#             stats_text += "\nüéÆ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º:*\n"
#             for game_type, game_data in stats['games_stats'].items():
#                 game_name = GAME_NAMES_RU.get(game_type, game_type.replace("_", " ").title())
#                 stats_text += (
#                     f"  ‚Ä¢ {game_name}:\n"
#                     f"    - –°—ã–≥—Ä–∞–Ω–æ: *{game_data['played']}*\n"
#                     f"    - –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{game_data['correct']}*\n"
#                     f"    - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{game_data['incorrect']}*\n"
#                 )
#                 if game_type == "recall_typing" and 'best_time' in game_data and game_data['best_time'] is not None:
#                     stats_text += f"    - –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: *{game_data['best_time']:.2f}* —Å–µ–∫.\n"
#                 stats_text += "\n"
#     else:
#         stats_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –∏ –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã!"
#     return stats_text

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics_handler(message: Message, state: FSMContext, bot: Bot):
    await cleanup_guess_audio(message, state, bot)
    user_id = str(message.from_user.id)
    await update_last_active(int(user_id))
    user_stats = await load_stats() # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_stats = user_stats.get(user_id, {}) # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_name_display = message.from_user.username if message.from_user.username else message.from_user.full_name

    total_correct_answers = user_stats.get('total_correct_answers', 0)
    best_test_score = user_stats.get('best_test_score', 0)
    last_activity_date = user_stats.get('last_activity_date', "N/A")
    best_test_time = user_stats.get('best_test_time', float('inf'))

    # Format total_correct_answers display
    total_correct_answers_display = str(total_correct_answers) if total_correct_answers > 0 else "–Ω–µ –ø—Ä–æ–π–¥–µ–Ω"

    # Format best_test_score display
    best_test_score_display = f"{best_test_score} –∏–∑ {TEST_QUESTIONS_COUNT}" if best_test_score > 0 else "–Ω–µ –ø—Ä–æ–π–¥–µ–Ω"

    # Format best_test_time display
    best_test_time_display = f"{best_test_time:.2f} —Å–µ–∫." if best_test_time != float('inf') else "–Ω–µ –ø—Ä–æ–π–¥–µ–Ω"

    # Calculate ranking
    user_ranks = await calculate_overall_score_and_rank()
    current_user_rank_info = next((u for u in user_ranks if u['user_id'] == user_id), None)
    
    rank_text = ""
    if current_user_rank_info:
        rank_text = f"\n‚≠ê *–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {current_user_rank_info['rank']} –º–µ—Å—Ç–æ* (–û—á–∫–∏: {current_user_rank_info['overall_score']:.2f})\n"

    stats_text = (
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, {user_name_display}:*\n"
    )

    stats_text += rank_text # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Ç–∏–Ω–≥–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

    stats_text += (
        f"\nüìù *–¢–µ—Å—Ç –∑–Ω–∞–Ω–∏–π:*\n"
        f"   –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: `{total_correct_answers_display}`\n"
        f"   –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: `{best_test_score_display}`\n"
        f"   –õ—É—á—à–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: `{best_test_time_display}`\n\n"
        f"üéÆ *–ò–≥—Ä—ã:*\n"
    )

    if 'games_stats' in user_stats:
        for game_type, game_data in user_stats['games_stats'].items():
            game_name = GAME_NAMES_RU.get(game_type, game_type.replace("_", " ").title())
            stats_text += (
                f"  ‚Ä¢ {game_name}:\n"
                f"    - –°—ã–≥—Ä–∞–Ω–æ: *{game_data['played']}*\n"
                f"    - –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{game_data['correct']}*\n"
                f"    - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{game_data['incorrect']}*\n"
            )
            if game_type == "recall_typing" and 'best_time' in game_data and game_data['best_time'] is not None:
                stats_text += f"    - –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: *{game_data['best_time']:.2f}* —Å–µ–∫.\n"
            stats_text += "\n"

    await message.answer(stats_text, reply_markup=main_menu_keyboard, parse_mode="Markdown")
