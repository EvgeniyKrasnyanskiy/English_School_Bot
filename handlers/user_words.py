from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import main_menu_keyboard, confirm_create_set_keyboard, get_my_set_keyboard, create_file_selection_keyboard, delete_my_set_confirm_keyboard, cancel_add_del_keyboard
from utils.word_manager import word_manager
from utils.bad_words import is_bad_word
from database import get_user_display_name
from typing import Dict, List
import html
import os
import logging
from config import MAX_USER_WORDS # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MAX_USER_WORDS –∏–∑ config.py
from utils.data_manager import get_banned_users, get_image_filepath, get_audio_filepath
from aiogram.exceptions import TelegramBadRequest

logger = logging.getLogger(__name__)


class UserWordStates(StatesGroup):
    waiting_for_create_confirm = State()
    waiting_for_add_word = State()
    waiting_for_del_word = State()
    waiting_for_delete_confirm = State()
    word_list_visible = State() # New state to track word list visibility


router = Router()

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_display_name, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
async def _get_user_display_name(user_id: int) -> str:
    user_name_from_db = await get_user_display_name(user_id)
    if user_name_from_db:
        return user_name_from_db
    return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

@router.message(Command("my_set"))
async def my_word_set_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in await get_banned_users():
        await message.reply("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å–ª–æ–≤.")
        return
    user_display_name = await _get_user_display_name(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞ (–±–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
    expected_custom_filename_base = word_manager.get_user_custom_filename(user_id, user_display_name)
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —ç—Ç–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
    available_personal_files = [f for f in word_manager.get_available_files() if f.startswith(expected_custom_filename_base)]
    
    has_personal_set = len(available_personal_files) > 0
    current_user_file = word_manager.get_user_current_file(user_id) # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await state.update_data(word_list_visible=False) # Initialize word list visibility

    if has_personal_set:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—á–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤, –≤—ã–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–µ–π—à–µ–≥–æ)
        selected_personal_file = available_personal_files[0]
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –µ–≥–æ –ª–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ
        if current_user_file != selected_personal_file:
            word_manager.set_user_current_file(user_id, selected_personal_file, user_display_name)
            current_user_file = selected_personal_file # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

        base_personal_filename = word_manager.get_user_custom_filename(user_id, user_display_name)
        is_personal_set = current_user_file.startswith(base_personal_filename) and current_user_file.endswith(".json")
        info = word_manager.get_file_info(current_user_file)
        if info:
            words = word_manager.load_words_from_file(os.path.join(word_manager.data_dir, "words", current_user_file))
            
            message_text = f"üìÅ <b>–í–∞—à –ª–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤:</b> {html.escape(current_user_file)}\n"
            message_text += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {info['word_count']} / {MAX_USER_WORDS}\n"
            message_text += f"‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è —ç—Ç–∏—Ö —Å–ª–æ–≤ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –∞—É–¥–∏–æ.\n\n"
    
            if words:
                message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            else:
                message_text += "–í–∞—à –ª–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'.\n\n"
                message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            await message.answer(
                message_text,
                parse_mode="HTML",
                reply_markup=get_my_set_keyboard(is_personal_set=is_personal_set, show_list_button_text="üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤")
            )
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ (–ø–æ–≤—Ä–µ–∂–¥–µ–Ω), –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –Ω–∞–±–æ—Ä–µ —Å–ª–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=main_menu_keyboard
            )
            await state.clear()
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä, —Ç–∞–∫ –∫–∞–∫ –ª–∏—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –Ω–µ—Ç
        await message.answer(
            f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤. –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ?\n"
            f"–í–∞—à –Ω–∞–±–æ—Ä –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω: <b>{html.escape(word_manager.get_user_custom_filename(user_id, user_display_name))}*****.json</b>\n"
            f"–ì–¥–µ ***** - —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.",
            parse_mode="HTML",
            reply_markup=confirm_create_set_keyboard
        )
        await state.set_state(UserWordStates.waiting_for_create_confirm)


@router.callback_query(F.data == "create_my_word_set", UserWordStates.waiting_for_create_confirm)
async def create_my_word_set(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in await get_banned_users():
        await callback.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å–ª–æ–≤.", show_alert=True)
        await state.clear()
        return
    await callback.answer()
    user_id = callback.from_user.id
    user_display_name = await _get_user_display_name(user_id)
    logger.debug(f"[create_my_word_set] User ID: {user_id}, Display Name: {user_display_name}")

    created_filename = word_manager.create_new_file(user_id, user_display_name) # Passing user_display_name

    if created_filename:
        logger.debug(f"[create_my_word_set] Successfully created and set current file to: {created_filename}")
        
        # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await state.update_data(word_list_visible=False) # Initialize word list visibility
        await callback.message.edit_text(
            f"‚úÖ –í–∞—à –ª–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ <b>{html.escape(created_filename)}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"–í–∞—à –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –ø—É—Å—Ç ({0} / {MAX_USER_WORDS}). –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'.\n\n"
            f"‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è —ç—Ç–∏—Ö —Å–ª–æ–≤ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –∞—É–¥–∏–æ.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_my_set_keyboard(is_personal_set=True, show_list_button_text="üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤")
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ª–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            reply_markup=None # –£–±–∏—Ä–∞–µ–º reply_markup –∏–∑ edit_text
        )
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await state.clear()


@router.callback_query(F.data == "back_to_main_from_my_set")
async def back_to_main_from_my_set_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.edit_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=None)
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)


@router.callback_query(F.data == "cancel_create_word_set", UserWordStates.waiting_for_create_confirm)
async def cancel_create_word_set(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)


# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /my_list, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–µ–ø–µ—Ä—å –≤ /my_set
# @router.message(Command("my_list"))
# async def my_list_command(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     user_display_name = await _get_user_display_name(user_id)
#     custom_filename = word_manager.get_user_custom_filename(user_id, user_display_name)

#     if not os.path.exists(os.path.join(word_manager.data_dir, custom_filename)):
#         await message.answer(
#             "–£ –≤–∞—Å –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /my_set —Å–Ω–∞—á–∞–ª–∞.",
#             reply_markup=main_menu_keyboard
#         )
#         await state.clear()
#         return

#     words = word_manager.load_words_from_file(os.path.join(word_manager.data_dir, custom_filename))
#     if not words:
#         await message.answer(
#             "–í–∞—à –ª–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_my_word.",
#             reply_markup=main_menu_keyboard
#         )
#         await state.clear()
#         return

#     word_list_text = f"üìÅ <b>–í–∞—à –ª–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ ({len(words)}):</b>\n\n"
#     for word_pair in words:
#         word_list_text += f"  ‚Ä¢ <code>{html.escape(word_pair['en'])} = {html.escape(word_pair['ru'])}</code>\n"
    
#     await message.answer(
#         word_list_text,
#         parse_mode="HTML",
#         reply_markup=my_set_keyboard # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º
#     )
#     await state.clear()


@router.callback_query(F.data == "add_my_word")
async def add_my_word_command(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in await get_banned_users():
        await callback.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å–ª–æ–≤.", show_alert=True)
        await state.clear()
        return
    await callback.answer()
    user_id = callback.from_user.id
    current_user_file = word_manager.get_user_current_file(user_id) # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_file_path = os.path.join(word_manager.data_dir, "words", current_user_file)
    logger.debug(f"[add_my_word_command] User ID: {user_id}, Current User File: {current_user_file}")
    logger.debug(f"[add_my_word_command] Checking file existence for path: {current_file_path}, Exists: {os.path.exists(current_file_path)}")

    if not os.path.exists(current_file_path) or current_user_file == "all_words.json":
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /my_set —Å–Ω–∞—á–∞–ª–∞."
        )
        await callback.message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard
        )
        await state.clear()
        return

    await callback.message.edit_text(
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ_—Å–ª–æ–≤–æ=—Ä—É—Å—Å–∫–∏–π_–ø–µ—Ä–µ–≤–æ–¥</code>\n"
        f"(–ú–∞–∫—Å–∏–º—É–º —Å–ª–æ–≤ –≤ –Ω–∞–±–æ—Ä–µ: {MAX_USER_WORDS})",
        parse_mode="HTML",
        reply_markup=cancel_add_del_keyboard
    )
    await state.set_state(UserWordStates.waiting_for_add_word)


@router.message(UserWordStates.waiting_for_add_word, F.text)
async def process_add_my_word(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in await get_banned_users():
        await message.reply("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å–ª–æ–≤.")
        await state.clear()
        return
    current_user_file = word_manager.get_user_current_file(user_id) # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_file_path = os.path.join(word_manager.data_dir, "words", current_user_file)
    logger.debug(f"[process_add_my_word] User ID: {user_id}, Current User File: {current_user_file}")
    logger.debug(f"[process_add_my_word] Checking file existence for path: {current_file_path}, Exists: {os.path.exists(current_file_path)}")

    if not os.path.exists(current_file_path) or current_user_file == "all_words.json":
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /my_set —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu_keyboard
        )
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç —Å–ª–æ–≤
    current_words = word_manager.load_words_from_file(os.path.join(word_manager.data_dir, "words", current_user_file))
    if len(current_words) >= MAX_USER_WORDS:
        state_data = await state.get_data()
        word_list_visible = state_data.get("word_list_visible", False)
        show_list_button_text = "–°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤" if word_list_visible else "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"
        await message.answer(
            f"‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ ({MAX_USER_WORDS}) –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –Ω–∞–±–æ—Ä–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–≤–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ.",
            parse_mode="HTML",
            reply_markup=get_my_set_keyboard(is_personal_set=True, show_list_button_text=show_list_button_text)
        )
        await state.clear()
        return

    word_pair_str = message.text.strip()
    if "=" not in word_pair_str:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ_—Å–ª–æ–≤–æ=—Ä—É—Å—Å–∫–∏–π_–ø–µ—Ä–µ–≤–æ–¥</code>. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'.",
            parse_mode="HTML",
            reply_markup=cancel_add_del_keyboard
        )
        return

    en_word, ru_word = word_pair_str.split("=", maxsplit=1)
    en_word = en_word.strip().lower()
    ru_word = ru_word.strip().lower()

    if not en_word or not ru_word:
        await message.answer(
            "–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return

    if is_bad_word(en_word) or is_bad_word(ru_word):
        state_data = await state.get_data()
        word_list_visible = state_data.get("word_list_visible", False)
        show_list_button_text = "–°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤" if word_list_visible else "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"
        await message.answer(
            "–≠—Ç–æ —Å–ª–æ–≤–æ –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å. –û–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.",
            reply_markup=get_my_set_keyboard(is_personal_set=True, show_list_button_text=show_list_button_text)
        )
        await state.clear()
        return

    if word_manager.add_word_to_file(current_user_file, {"en": en_word, "ru": ru_word}):
        state_data = await state.get_data()
        word_list_visible = state_data.get("word_list_visible", False)
        show_list_button_text = "–°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤" if word_list_visible else "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"
        await message.answer(
            f"‚úÖ –°–ª–æ–≤–æ <code>{html.escape(en_word)}={html.escape(ru_word)}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä!\n"
            "‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –∞—É–¥–∏–æ.",
            parse_mode="HTML",
            reply_markup=get_my_set_keyboard(is_personal_set=True, show_list_button_text=show_list_button_text)
        )
    else:
        state_data = await state.get_data()
        word_list_visible = state_data.get("word_list_visible", False)
        show_list_button_text = "–°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤" if word_list_visible else "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            parse_mode="HTML",
            reply_markup=get_my_set_keyboard(is_personal_set=True, show_list_button_text=show_list_button_text)
        )
    await state.clear()


@router.callback_query(F.data == "del_my_word")
async def del_my_word_command(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in await get_banned_users():
        await callback.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å–ª–æ–≤.", show_alert=True)
        await state.clear()
        return
    await callback.answer()
    user_id = callback.from_user.id
    current_user_file = word_manager.get_user_current_file(user_id) # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_file_path = os.path.join(word_manager.data_dir, "words", current_user_file)
    logger.debug(f"[del_my_word_command] User ID: {user_id}, Current User File: {current_user_file}")
    logger.debug(f"[del_my_word_command] Checking file existence for path: {current_file_path}, Exists: {os.path.exists(current_file_path)}")

    if not os.path.exists(current_file_path) or current_user_file == "all_words.json":
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /my_set —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu_keyboard
        )
        await state.clear()
        return

    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –≤–∞—à–µ–≥–æ –Ω–∞–±–æ—Ä–∞.",
        reply_markup=cancel_add_del_keyboard
    )
    await state.set_state(UserWordStates.waiting_for_del_word)


@router.message(UserWordStates.waiting_for_del_word, F.text)
async def process_del_my_word(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in await get_banned_users():
        await message.reply("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å–ª–æ–≤.")
        await state.clear()
        return
    current_user_file = word_manager.get_user_current_file(user_id) # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_file_path = os.path.join(word_manager.data_dir, "words", current_user_file)
    logger.debug(f"[process_del_my_word] User ID: {user_id}, Current User File: {current_user_file}")
    logger.debug(f"[process_del_my_word] Checking file existence for path: {current_file_path}, Exists: {os.path.exists(current_file_path)}")

    if not os.path.exists(current_file_path) or current_user_file == "all_words.json":
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /my_set —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu_keyboard
        )
        await state.clear()
        return

    en_word_to_delete = message.text.strip().lower()
    if not en_word_to_delete:
        await message.answer(
            "–°–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'.",
            parse_mode="HTML",
            reply_markup=cancel_add_del_keyboard
        )
        return

    if word_manager.delete_word_from_file(current_user_file, en_word_to_delete):
        state_data = await state.get_data()
        word_list_visible = state_data.get("word_list_visible", False)
        show_list_button_text = "–°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤" if word_list_visible else "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"
        await message.answer(
            f"‚úÖ –°–ª–æ–≤–æ <code>{html.escape(en_word_to_delete)}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞.",
            parse_mode="HTML",
            reply_markup=get_my_set_keyboard(is_personal_set=True, show_list_button_text=show_list_button_text)
        )
    else:
        state_data = await state.get_data()
        word_list_visible = state_data.get("word_list_visible", False)
        show_list_button_text = "–°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤" if word_list_visible else "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"
        await message.answer(
            f"‚ùå –°–ª–æ–≤–æ <code>{html.escape(en_word_to_delete)}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º –Ω–∞–±–æ—Ä–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            parse_mode="HTML",
            reply_markup=get_my_set_keyboard(is_personal_set=True, show_list_button_text=show_list_button_text)
        )
    await state.clear()


@router.callback_query(F.data.startswith("select_file_"))
async def process_select_file(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in await get_banned_users():
        await callback.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å–ª–æ–≤.", show_alert=True)
        await state.clear()
        return
    await callback.answer()
    user_id = callback.from_user.id
    selected_filename = callback.data.replace("select_file_", "")
    user_display_name = await _get_user_display_name(user_id)
    is_personal_set = selected_filename == word_manager.get_user_custom_filename(user_id, user_display_name)

    if word_manager.set_user_current_file(user_id, selected_filename, user_display_name):
        # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º word_list_visible –≤ False –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞ /my_set
        await state.update_data(word_list_visible=False)
        info = word_manager.get_file_info(selected_filename)
        words_in_file = word_manager.load_words_from_file(os.path.join(word_manager.data_dir, "words", selected_filename))
        
        message_text = f"üìÅ <b>{'–í–∞—à –ª–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤:' if is_personal_set else '–ù–∞–±–æ—Ä —Å–ª–æ–≤:'}</b> {html.escape(selected_filename)}\n"
        message_text += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {len(words_in_file)}{f' / {MAX_USER_WORDS}' if is_personal_set else ''}\n"
        message_text += f"‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è —ç—Ç–∏—Ö —Å–ª–æ–≤ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –∞—É–¥–∏–æ.\n\n"
        message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await callback.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=get_my_set_keyboard(is_personal_set=is_personal_set, show_list_button_text="üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤")
        )
    else:
        state_data = await state.get_data()
        word_list_visible = state_data.get("word_list_visible", False)
        show_list_button_text = "–°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤" if word_list_visible else "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"
        await callback.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª '{html.escape(selected_filename)}'. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            parse_mode="HTML",
            reply_markup=get_my_set_keyboard(is_personal_set=is_personal_set, show_list_button_text=show_list_button_text)
        )
    await state.clear()


@router.callback_query(F.data == "back_to_main_from_my_set_select_file")
async def back_to_main_from_my_set_select_file_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    try:
        await callback.message.edit_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    except TelegramBadRequest as e:
        logger.warning(f"[back_to_main_from_my_set_select_file_callback] TelegramBadRequest when editing message: {e}")
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)


@router.callback_query(F.data == "switch_my_set_inline")
async def switch_my_set_inline_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    # –ü–µ—Ä–µ–¥–∞–µ–º callback.message –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await _send_file_selection_menu_helper(callback.message, state)


# @router.message(Command("list")) # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
# async def list_user_words_command(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in await get_banned_users():
#         await message.reply("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å–ª–æ–≤.")
#         return
    
#     parts = message.text.split(maxsplit=1)
#     target_filename = word_manager.get_user_current_file(user_id) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

#     if len(parts) > 1:
#         potential_filename = parts[1].strip()
#         if potential_filename.endswith(".json"):
#             if potential_filename in word_manager.get_available_files() or \
#                potential_filename == word_manager.get_user_custom_filename(user_id, await _get_user_display_name(user_id)):
#                 target_filename = potential_filename
#             else:
#                 await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.", reply_markup=main_menu_keyboard)
#                 await state.clear()
#                 return
#         else:
#             await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/list [–∏–º—è_—Ñ–∞–π–ª–∞.json]</code> –∏–ª–∏ <code>/list</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞.", parse_mode="HTML")
#             await state.clear()
#             return

#     words = word_manager.load_words_from_file(os.path.join(word_manager.data_dir, "words", target_filename))
#     words.sort(key=lambda x: x['en'].lower()) # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—É
#     if not words:
#         await message.answer(f"–°–ª–æ–≤–∞—Ä—å —Ñ–∞–π–ª–∞ <code>{html.escape(target_filename)}</code> –ø—É—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
#         await state.clear()
#         return

#     word_list_text = f"üìÅ <b>–°–ª–æ–≤–∞ –≤ —Ñ–∞–π–ª–µ {html.escape(target_filename)} (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É):</b>\n\n"
#     for word_pair in words:
#         word_list_text += f"  ‚Ä¢ <code>{html.escape(word_pair['en'])} = {html.escape(word_pair['ru'])}</code>\n"
    
#     await message.answer(
#         word_list_text,
#         parse_mode="HTML",
#         reply_markup=main_menu_keyboard
#     )
#     await state.clear()


@router.callback_query(F.data == "toggle_my_word_list") # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π callback_data
async def toggle_my_word_list_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in await get_banned_users():
        await callback.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å–ª–æ–≤.", show_alert=True)
        await state.clear()
        return
    await callback.answer()
    user_id = callback.from_user.id
    current_file = word_manager.get_user_current_file(user_id)
    user_display_name = await _get_user_display_name(user_id)
    base_personal_filename = word_manager.get_user_custom_filename(user_id, user_display_name)
    is_personal_set = current_file.startswith(base_personal_filename) and current_file.endswith(".json")
    
    state_data = await state.get_data()
    word_list_visible = state_data.get("word_list_visible", False)
    word_list_visible = not word_list_visible # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    await state.update_data(word_list_visible=word_list_visible)

    logger.debug(f"[toggle_my_word_list_callback] User ID: {user_id}, Current File: {current_file}, User Display Name: {user_display_name}, Is Personal Set: {is_personal_set}, List Visible: {word_list_visible}")

    message_prefix = f"üìÅ <b>{'–í–∞—à –ª–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤:' if is_personal_set else '–ù–∞–±–æ—Ä —Å–ª–æ–≤:'}</b> {html.escape(current_file)}\n"
    word_count_str = str(len(word_manager.load_words_from_file(os.path.join(word_manager.data_dir, 'words', current_file))))
    if is_personal_set:
        word_count_str += f" / {MAX_USER_WORDS}"
    message_prefix += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {word_count_str}\n"
    message_prefix += f"‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è —ç—Ç–∏—Ö —Å–ª–æ–≤ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –∞—É–¥–∏–æ.\n\n"
    message_prefix += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    words = word_manager.load_words_from_file(os.path.join(word_manager.data_dir, "words", current_file))
    words.sort(key=lambda x: x['en'].lower()) # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—É

    show_list_button_text = "–°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤" if word_list_visible else "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"

    message_text_content = ""
    if word_list_visible and words:
        message_text_content = f"<b>–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ ({len(words)}):</b>\n"
        for word_pair in words:
            icons = []
            if await get_audio_filepath(word_pair['en']):
                icons.append(" üîä")
            if await get_image_filepath(word_pair['en']):
                icons.append(" üñºÔ∏è")
            icon_str = "".join(icons)
            message_text_content += f"  ‚Ä¢<code>{html.escape(word_pair['en'])} = {html.escape(word_pair['ru'])}</code>{icon_str}\n"
    elif not words:
        message_text_content = f"{'–í–∞—à –ª–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤' if is_personal_set else '–ù–∞–±–æ—Ä —Å–ª–æ–≤'} <code>{html.escape(current_file)}</code> –ø—É—Å—Ç. "
        if is_personal_set:
            message_text_content += '–î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ".'
        message_text_content += "\n"

    final_message_text = message_prefix
    if message_text_content:
        final_message_text = final_message_text.replace("\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", f"\n{message_text_content}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    
    try:
        markup_to_send = get_my_set_keyboard(is_personal_set=is_personal_set, show_list_button_text=show_list_button_text)
        logger.debug(f"[toggle_my_word_list_callback] Sending markup: is_personal_set={is_personal_set}, markup={markup_to_send.inline_keyboard}")

        await callback.message.edit_text(
            final_message_text,
            parse_mode="HTML",
            reply_markup=markup_to_send
        )
    except TelegramBadRequest as e:
        logger.warning(f"[toggle_my_word_list_callback] TelegramBadRequest when editing message: {e}")


async def _send_file_selection_menu_helper(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_display_name = await _get_user_display_name(user_id)
    available_files = word_manager.get_available_files()
    current_file = word_manager.get_user_current_file(user_id)

    if not available_files:
        await message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.", reply_markup=main_menu_keyboard)
        await state.clear()
        return
    
    keyboard = create_file_selection_keyboard(available_files, current_file)
    try:
        await message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    except TelegramBadRequest as e:
        logger.warning(f"[_send_file_selection_menu_helper] TelegramBadRequest when editing message: {e}")
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=keyboard
        )


@router.callback_query(F.data == "delete_my_word_set")
async def delete_my_word_set_command(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in await get_banned_users():
        await callback.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å–ª–æ–≤.", show_alert=True)
        await state.clear()
        return
    await callback.answer()
    user_id = callback.from_user.id
    current_user_file = word_manager.get_user_current_file(user_id)

    if current_user_file == "all_words.json":
        await callback.message.edit_text(
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤.",
            reply_markup=get_my_set_keyboard(is_personal_set=False)
        )
        await state.clear()
        return

    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ª–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ <b>{html.escape(current_user_file)}</b>? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        parse_mode="HTML",
        reply_markup=delete_my_set_confirm_keyboard
    )
    await state.set_state(UserWordStates.waiting_for_delete_confirm)


@router.callback_query(F.data == "confirm_delete_my_word_set", UserWordStates.waiting_for_delete_confirm)
async def confirm_delete_my_word_set(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in await get_banned_users():
        await callback.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å–ª–æ–≤.", show_alert=True)
        await state.clear()
        return
    await callback.answer()
    user_id = callback.from_user.id
    current_user_file = word_manager.get_user_current_file(user_id)
    user_display_name = await _get_user_display_name(user_id) # –î–æ–±–∞–≤–ª–µ–Ω–æ: –ü–æ–ª—É—á–∞–µ–º user_display_name

    if current_user_file == "all_words.json":
        state_data = await state.get_data()
        word_list_visible = state_data.get("word_list_visible", False)
        show_list_button_text = "–°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤" if word_list_visible else "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"
        await callback.message.edit_text(
            "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤.",
            reply_markup=get_my_set_keyboard(is_personal_set=False, show_list_button_text=show_list_button_text)
        )
        await state.clear()
        return

    if word_manager.delete_file(current_user_file):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        word_manager.set_user_current_file(user_id, "all_words.json", user_display_name) # Pass user_display_name
        await callback.message.edit_text(
            f"‚úÖ –í–∞—à –ª–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ <b>{html.escape(current_user_file)}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            parse_mode="HTML"
        )
    else:
        state_data = await state.get_data()
        word_list_visible = state_data.get("word_list_visible", False)
        show_list_button_text = "–°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤" if word_list_visible else "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"
        await callback.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä —Å–ª–æ–≤ <b>{html.escape(current_user_file)}</b>. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            parse_mode="HTML",
            reply_markup=get_my_set_keyboard(is_personal_set=False, show_list_button_text=show_list_button_text)
        )
    await state.clear()


@router.callback_query(F.data == "cancel_delete_my_word_set", UserWordStates.waiting_for_delete_confirm)
async def cancel_delete_my_word_set(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)


@router.callback_query(F.data == "cancel_add_del_word", StateFilter(UserWordStates.waiting_for_add_word, UserWordStates.waiting_for_del_word))
async def cancel_add_del_word_action(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in await get_banned_users():
        await callback.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å–ª–æ–≤.", show_alert=True)
        await state.clear()
        return
    await callback.answer()
    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    state_data = await state.get_data()
    word_list_visible = state_data.get("word_list_visible", False)
    show_list_button_text = "–°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤" if word_list_visible else "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–±–æ—Ä–æ–º —Å–ª–æ–≤.", reply_markup=get_my_set_keyboard(is_personal_set=True, show_list_button_text=show_list_button_text))
