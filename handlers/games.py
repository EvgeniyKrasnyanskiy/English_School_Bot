import random
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from utils.utils import get_random_word, shuffle_word, get_quiz_options
import uuid
from database import update_last_active
from keyboards import games_menu_keyboard, main_menu_keyboard, quiz_options_keyboard, start_recall_typing_keyboard
from utils.data_manager import update_game_stats
import datetime
from handlers.stats import show_statistics_handler # Import the function for unified stats display
import asyncio
from config import RECALL_TYPING_COUNTDOWN_SECONDS # Import countdown seconds
from utils.audio_cleanup import cleanup_guess_audio
from aiogram import Bot # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —è–≤–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ bot
from utils.word_manager import word_manager # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º word_manager
from config import TEST_QUESTIONS_COUNT

router = Router()

class Games(StatesGroup):
    in_games_menu = State()
    quiz_choose_translation = State()
    quiz_build_word = State()
    quiz_find_missing_letter = State() # New state for 'Find Missing Letter' game
    quiz_recall_typing = State() # New state for 'Recall Typing' game
    quiz_guess_word = State() # New state for 'Guess the Word' game

@router.message(F.text == "üéÆ –ò–≥—Ä—ã")
async def cmd_games(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    await state.set_state(Games.in_games_menu)
    await state.update_data(user_id=user_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=games_menu_keyboard)
# --- Guess the Word (by Audio) ---
@router.message(F.text == "üéß –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ", Games.in_games_menu)
async def start_guess_word_game(message: Message, state: FSMContext):
    user_id = message.from_user.id
    words = word_manager.load_words(user_id)
    await state.set_state(Games.quiz_guess_word)
    await state.update_data(user_id=user_id, all_words=words)
    await message.answer("–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –∞—É–¥–∏–æ –∏ —É–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ.")
    await send_guess_word_question(message, state)

async def send_guess_word_question(message: Message, state: FSMContext):
    state_data = await state.get_data()
    words = state_data['all_words']
    word = get_random_word(words)

    # Build 3 distractors in Russian, 1 correct in Russian
    options = get_quiz_options(word['ru'], words)

    # Save current word and options for later validation
    await state.update_data(
        current_guess_word_en=word['en'],
        current_guess_word_ru=word['ru'],
        quiz_options=options
    )

    # Try to send audio for the word if exists via data_manager like in learn
    from aiogram.types import FSInputFile
    from utils.data_manager import get_audio_filepath
    audio_path = await get_audio_filepath(word['en'])
    if audio_path:
        obfuscated_filename = f"{uuid.uuid4().hex}.mp3"
        sent_audio = await message.answer_audio(
            audio=FSInputFile(audio_path, filename=obfuscated_filename),
            title="–ó–∞–¥–∞–Ω–∏–µ",
            performer="",
        )
        # Re-fetch state data to ensure we have the most up-to-date list of audio IDs
        current_audio_ids = (await state.get_data()).get("guess_sent_audio_ids", [])
        current_audio_ids.append(sent_audio.message_id)
        await state.update_data(guess_sent_audio_ids=current_audio_ids)
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–≥—Ä—É. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /new_sound. –°–ª–æ–≤–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (~24 —á–∞—Å–∞).",
                             reply_markup=main_menu_keyboard)
        await state.clear()
        return # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –Ω–µ—Ç

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:",
        reply_markup=quiz_options_keyboard(options, word['ru']),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("quiz_answer_"), Games.quiz_guess_word)
async def process_guess_word_answer(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split('_')
    # The index of the chosen option is at data[2], and is_correct flag is at data[3]
    chosen_option_index = int(data[2])
    is_correct_flag = data[3]

    state_data = await state.get_data()
    user_id = state_data['user_id']
    correct_english_word = state_data['current_guess_word_en']
    correct_russian_word = state_data['current_guess_word_ru']
    quiz_options = state_data['quiz_options']
    current_date = datetime.datetime.now().isoformat()

    chosen_answer = quiz_options[chosen_option_index] # Get the actual text of the chosen answer
    is_correct = (chosen_answer == correct_russian_word)

    if is_correct:
        await callback.answer("–í–µ—Ä–Ω–æ!", show_alert=False)
        await callback.message.edit_text(
            f"–°–ª–æ–≤–æ –ø–æ –∞—É–¥–∏–æ: *{correct_english_word}*\n–í–∞—à –æ—Ç–≤–µ—Ç: *{chosen_answer}* - ‚úÖ –í–µ—Ä–Ω–æ!",
            parse_mode="Markdown"
        )
        current_word_set = word_manager.get_user_current_file(int(user_id))
        await update_game_stats(int(user_id), "guess_word", True, current_date, word_set_name=current_word_set)
    else:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ.", show_alert=False)
        await callback.message.edit_text(
            f"–°–ª–æ–≤–æ –ø–æ –∞—É–¥–∏–æ: *{correct_english_word}*\n–í–∞—à –æ—Ç–≤–µ—Ç: *{chosen_answer}* - ‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{correct_russian_word}*",
            parse_mode="Markdown"
        )
        current_word_set = word_manager.get_user_current_file(int(user_id))
        await update_game_stats(int(user_id), "guess_word", False, current_date, word_set_name=current_word_set)

    await callback.message.answer(
        "–•–æ—Ç–∏—Ç–µ –µ—â–µ —Ä–∞–∑ —Å—ã–≥—Ä–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_game_show_stats"),
             InlineKeyboardButton(text="–î–∞, –µ—â–µ —Ä–∞–∑!", callback_data="play_guess_word_again")]
        ])
    )
    '''
    await callback.message.answer(
        "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard
    )
    '''

@router.callback_query(F.data == "play_guess_word_again", Games.quiz_guess_word)
async def play_guess_word_again(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    state_data = await state.get_data()
    user_id = state_data['user_id']
    await update_last_active(int(user_id))
    await cleanup_guess_audio(callback.message, state, bot) # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
    await state.set_state(Games.quiz_guess_word) # –î–æ–±–∞–≤–ª–µ–Ω–æ: –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await send_guess_word_question(callback.message, state)

# --- Choose Translation Quiz ---
@router.message(F.text == "ü§î –í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥", Games.in_games_menu)
async def start_choose_translation_quiz(message: Message, state: FSMContext):
    user_id = message.from_user.id
    words = word_manager.load_words(user_id)
    await state.set_state(Games.quiz_choose_translation)
    await state.update_data(user_id=user_id, all_words=words)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞.")
    await send_choose_translation_question(message, state)

async def send_choose_translation_question(message: Message, state: FSMContext):
    state_data = await state.get_data()
    words = state_data['all_words']
    word = get_random_word(words)
    options = get_quiz_options(word['ru'], words)
    
    await state.update_data(
        current_quiz_word_en=word['en'],
        current_quiz_word_ru=word['ru'],
        quiz_options=options # Store options for later validation
    )

    await message.answer(
        f"–°–ª–æ–≤–æ: *{word['en']}*",
        reply_markup=main_menu_keyboard, # Keep main menu visible
        parse_mode="Markdown"
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:",
        reply_markup=quiz_options_keyboard(options, word['ru']),
        parse_mode="Markdown"
    )

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", Games.quiz_choose_translation)
async def handle_stats_button_in_choose_translation(message: Message, state: FSMContext, bot: Bot):
    # –£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏–∑ –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ" –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    await cleanup_guess_audio(message, state, bot)
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)


@router.callback_query(F.data.startswith("quiz_answer_"), Games.quiz_choose_translation)
async def process_choose_translation_answer(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split('_')
    # The index of the chosen option is at data[2], and is_correct flag is at data[3]
    chosen_option_index = int(data[2])
    is_correct_flag = data[3]
    
    state_data = await state.get_data()
    user_id = state_data['user_id']
    correct_russian_word = state_data['current_quiz_word_ru']
    english_word = state_data['current_quiz_word_en']
    quiz_options = state_data['quiz_options'] # Get options from state
    current_date = datetime.datetime.now().isoformat()

    chosen_answer = quiz_options[chosen_option_index] # Get the actual text of the chosen answer
    is_correct = (chosen_answer == correct_russian_word)

    if is_correct:
        await callback.answer("–í–µ—Ä–Ω–æ!", show_alert=False)
        await callback.message.edit_text(
            f"–°–ª–æ–≤–æ: *{english_word}*"
            f"\n–í–∞—à –æ—Ç–≤–µ—Ç: *{chosen_answer}* - ‚úÖ –í–µ—Ä–Ω–æ!",
            parse_mode="Markdown"
        )
        current_word_set = word_manager.get_user_current_file(int(user_id))
        await update_game_stats(int(user_id), "choose_translation", True, current_date, word_set_name=current_word_set)
    else:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ.", show_alert=False)
        await callback.message.edit_text(
            f"–°–ª–æ–≤–æ: *{english_word}*"
            f"\n–í–∞—à –æ—Ç–≤–µ—Ç: *{chosen_answer}* - ‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{correct_russian_word}*",
            parse_mode="Markdown"
        )
        current_word_set = word_manager.get_user_current_file(int(user_id))
        await update_game_stats(int(user_id), "choose_translation", False, current_date, word_set_name=current_word_set)
    
    await callback.message.answer(
        "–•–æ—Ç–∏—Ç–µ –µ—â–µ —Ä–∞–∑ —Å—ã–≥—Ä–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_game_show_stats"),
             InlineKeyboardButton(text="–î–∞, –µ—â–µ —Ä–∞–∑!", callback_data="play_choose_translation_again")]
        ])
    )

@router.callback_query(F.data == "play_choose_translation_again", Games.quiz_choose_translation)
async def play_choose_translation_again(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    user_id = state_data['user_id']
    await update_last_active(int(user_id))
    await send_choose_translation_question(callback.message, state)

# --- Build Word Quiz ---
@router.message(F.text == "üß© –°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ", Games.in_games_menu)
async def start_build_word_quiz(message: Message, state: FSMContext):
    user_id = message.from_user.id
    words = word_manager.load_words(user_id)
    await state.set_state(Games.quiz_build_word)
    await state.update_data(user_id=user_id, all_words=words)
    await message.answer(
        "–Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã. –°–æ–±–µ—Ä–∏ –∏–∑ –Ω–∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ. "
        "–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é.",
        reply_markup=main_menu_keyboard # Keep main menu visible
    )
    await send_build_word_question(message, state)

@router.message(F.text == "üîç –ù–∞–π–¥–∏ –±—É–∫–≤—É", Games.in_games_menu)
async def start_find_missing_letter_quiz(message: Message, state: FSMContext):
    user_id = message.from_user.id
    words = word_manager.load_words(user_id)
    await state.set_state(Games.quiz_find_missing_letter)
    await state.update_data(user_id=user_id, all_words=words)
    await message.answer(
        "–Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —Å–ª–æ–≤–æ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π –±—É–∫–≤–æ–π. –í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±—É–∫–≤—É.",
        reply_markup=main_menu_keyboard # Keep main menu visible
    )
    await send_find_missing_letter_question(message, state)

async def send_find_missing_letter_question(message: Message, state: FSMContext):
    state_data = await state.get_data()
    words = state_data['all_words']
    word_data = get_random_word(words)
    english_word = word_data['en']
    russian_translation = word_data['ru']

    if len(english_word) < 2:
        # Skip words too short to hide a letter meaningfully
        await send_find_missing_letter_question(message, state) # Try again with a different word
        return

    missing_index = random.randint(0, len(english_word) - 1)
    missing_letter = english_word[missing_index]
    displayed_word = english_word[:missing_index] + "_" + english_word[missing_index+1:]

    # Generate options for the missing letter
    options = [missing_letter]
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    while len(options) < 4:
        random_letter = random.choice(alphabet)
        if random_letter not in options:
            options.append(random_letter)
    random.shuffle(options)

    await state.update_data(current_missing_word_en=english_word, 
                             current_missing_word_ru=russian_translation, 
                             correct_missing_letter=missing_letter,
                             quiz_options=options # Store options for later validation
    )

    await message.answer(
        f"–ö–∞–∫–∞—è –±—É–∫–≤–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –≤ —Å–ª–æ–≤–µ: *{displayed_word.lower()}*" 
        f"\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: —ç—Ç–æ —Å–ª–æ–≤–æ –æ–∑–Ω–∞—á–∞–µ—Ç '{russian_translation}'",
        reply_markup=main_menu_keyboard, # Keep main menu visible
        parse_mode="Markdown"
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é –±—É–∫–≤—É:",
        reply_markup=quiz_options_keyboard(options, missing_letter), # Reusing quiz_options_keyboard
        parse_mode="Markdown"
    )

async def send_build_word_question(message: Message, state: FSMContext):
    state_data = await state.get_data()
    words = state_data['all_words']
    word = get_random_word(words)
    shuffled = shuffle_word(word['en'])
    
    await state.update_data(current_build_word_en=word['en'], current_build_word_ru=word['ru'])
    
    await message.answer(
        f"–ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: *{shuffled.lower()}*"
        f"\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: —ç—Ç–æ —Å–ª–æ–≤–æ –æ–∑–Ω–∞—á–∞–µ—Ç '{word['ru']}'",
        reply_markup=main_menu_keyboard, # Keep main menu visible
        parse_mode="Markdown"
    )
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é:",
        reply_markup=None, # No inline keyboard needed for text input
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("quiz_answer_"), Games.quiz_find_missing_letter)
async def process_find_missing_letter_answer(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split('_')
    # The index of the chosen option is at data[2], and is_correct flag is at data[3]
    chosen_option_index = int(data[2])
    is_correct_flag = data[3]

    state_data = await state.get_data()
    user_id = state_data['user_id']
    correct_english_word = state_data['current_missing_word_en']
    russian_translation = state_data['current_missing_word_ru']
    correct_missing_letter = state_data['correct_missing_letter']
    quiz_options = state_data['quiz_options'] # Get options from state
    current_date = datetime.datetime.now().isoformat()

    chosen_answer = quiz_options[chosen_option_index] # Get the actual text of the chosen answer
    is_correct = (chosen_answer == correct_missing_letter)

    if is_correct:
        await callback.answer("–í–µ—Ä–Ω–æ!", show_alert=False)
        await callback.message.edit_text(
            f"–°–ª–æ–≤–æ: *{correct_english_word}* (–ø—Ä–æ–ø—É—â–µ–Ω–∞: '{correct_missing_letter}')"
            f"\n–í–∞—à –æ—Ç–≤–µ—Ç: *{chosen_answer}* - ‚úÖ –í–µ—Ä–Ω–æ!",
            parse_mode="Markdown"
        )
        current_word_set = word_manager.get_user_current_file(int(user_id))
        await update_game_stats(int(user_id), "find_missing_letter", True, current_date, word_set_name=current_word_set)
    else:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ.", show_alert=False)
        await callback.message.edit_text(
            f"–°–ª–æ–≤–æ: *{correct_english_word}* (–ø—Ä–æ–ø—É—â–µ–Ω–∞: '{correct_missing_letter}')"
            f"\n–í–∞—à –æ—Ç–≤–µ—Ç: *{chosen_answer}* - ‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –±—É–∫–≤–∞: *{correct_missing_letter}*",
            parse_mode="Markdown"
        )
        current_word_set = word_manager.get_user_current_file(int(user_id))
        await update_game_stats(int(user_id), "find_missing_letter", False, current_date, word_set_name=current_word_set)

    await callback.message.answer(
        "–•–æ—Ç–∏—Ç–µ –µ—â–µ —Ä–∞–∑ —Å—ã–≥—Ä–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_game_show_stats"),
             InlineKeyboardButton(text="–î–∞, –µ—â–µ —Ä–∞–∑!", callback_data="play_find_missing_letter_again")]
        ])
    )

@router.message(Games.quiz_build_word)
async def process_build_word_answer(message: Message, state: FSMContext):
    user_answer = message.text.lower().strip()
    
    state_data = await state.get_data()
    user_id = state_data['user_id']
    correct_english_word = state_data['current_build_word_en']
    russian_translation = state_data['current_build_word_ru']
    current_date = datetime.datetime.now().isoformat()

    if user_answer == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or user_answer == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
        return
    
    if user_answer == correct_english_word:
        await message.answer(
            f"‚úÖ –í–µ—Ä–Ω–æ! –°–ª–æ–≤–æ: *{correct_english_word.capitalize()}* (–ø–µ—Ä–µ–≤–æ–¥: *{russian_translation}*)",
            parse_mode="Markdown"
        )
        current_word_set = word_manager.get_user_current_file(int(user_id))
        await update_game_stats(int(user_id), "build_word", True, current_date, word_set_name=current_word_set)
    else:
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ."
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{correct_english_word.capitalize()}* (–ø–µ—Ä–µ–≤–æ–¥: *{russian_translation}*)",
            parse_mode="Markdown"
        )
        current_word_set = word_manager.get_user_current_file(int(user_id))
        await update_game_stats(int(user_id), "build_word", False, current_date, word_set_name=current_word_set)
    
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_game_show_stats"),
             InlineKeyboardButton(text="–î–∞, –µ—â–µ —Ä–∞–∑!", callback_data="play_build_word_again")]
        ])
    )

@router.callback_query(F.data == "play_build_word_again", Games.quiz_build_word)
async def play_build_word_again(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    user_id = state_data['user_id']
    await update_last_active(int(user_id))
    await send_build_word_question(callback.message, state)


# --- Common Game Menu Navigation ---
@router.callback_query(F.data == "back_to_games_menu", Games.quiz_choose_translation)
@router.callback_query(F.data == "back_to_games_menu", Games.quiz_build_word)
async def back_to_games_menu_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Games.in_games_menu)
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∏–≥—Ä.", reply_markup=games_menu_keyboard)

@router.callback_query(F.data == "finish_game_show_stats")
async def finish_game_and_show_stats(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    state_data = await state.get_data()
    user_id = state_data['user_id']
    await cleanup_guess_audio(callback.message, state, bot) # –î–æ–±–∞–≤–ª–µ–Ω–æ: –û—á–∏—â–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ"
    await update_last_active(int(user_id))
    # –í–º–µ—Å—Ç–æ get_formatted_statistics, –≤—ã–∑—ã–≤–∞–µ–º show_statistics_handler –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await callback.message.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

@router.callback_query(F.data == "play_find_missing_letter_again", Games.quiz_find_missing_letter)
async def play_find_missing_letter_again(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    user_id = state_data['user_id']
    await update_last_active(int(user_id))
    await send_find_missing_letter_question(callback.message, state)

@router.callback_query(F.data == "play_recall_typing_again", Games.quiz_recall_typing)
async def play_recall_typing_again(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    user_id = state_data['user_id']
    await update_last_active(int(user_id))
    await send_recall_typing_question(callback.message, state)

@router.callback_query(F.data == "start_recall_typing_countdown", Games.quiz_recall_typing)
async def start_recall_typing_countdown(callback: CallbackQuery, state: FSMContext):
    await callback.answer() # Acknowledge the callback query
    # Edit the message to show the countdown
    countdown_message = await callback.message.edit_text(
        f"–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å! –ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {(RECALL_TYPING_COUNTDOWN_SECONDS + 3)} —Å–µ–∫—É–Ω–¥...",
        reply_markup=None
    )

    for i in range(int(RECALL_TYPING_COUNTDOWN_SECONDS + 2) - 1, 0, -1):
        await countdown_message.edit_text(f"–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å! –ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {i} —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(1)
    
    await countdown_message.delete() # Remove countdown message
    await send_recall_typing_question(callback.message, state) # Start the actual game question

@router.message(F.text == "üìù –í–≤–æ–¥ –ø–æ –ø–∞–º—è—Ç–∏", Games.in_games_menu)
async def start_recall_typing_quiz(message: Message, state: FSMContext):
    user_id = message.from_user.id
    words = word_manager.load_words(user_id)
    await state.set_state(Games.quiz_recall_typing)
    await state.update_data(user_id=user_id, all_words=words)
    await message.answer(
        "–Ø –ø–æ–∫–∞–∂—É –≤–∞–º —Å–ª–æ–≤–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º, –∑–∞—Ç–µ–º –≤—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –ø–æ –ø–∞–º—è—Ç–∏.\n\n–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
        reply_markup=start_recall_typing_keyboard
    )

async def send_recall_typing_question(message: Message, state: FSMContext):
    state_data = await state.get_data()
    words = state_data['all_words']
    word_data = get_random_word(words)
    english_word = word_data['en']
    russian_translation = word_data['ru']

    # Store the start time and the correct word for comparison BEFORE sending/deleting message
    await state.update_data(
        current_recall_word_en=english_word,
        current_recall_word_ru=russian_translation,
        question_start_time=datetime.datetime.now().isoformat()
    )

    # Send the word with translation, then delete it after a short delay
    prompt_message = await message.answer(
        f"–ó–∞–ø–æ–º–Ω–∏—Ç–µ: *{english_word}* ({russian_translation})",
        parse_mode="Markdown",
        reply_markup=main_menu_keyboard # Keep main menu visible
    )
    await asyncio.sleep(3) # Display for 3 seconds
    await prompt_message.delete()

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –ø–æ –ø–∞–º—è—Ç–∏:",
        reply_markup=None, # No inline keyboard for text input
        parse_mode="Markdown"
    )

@router.message(Games.quiz_recall_typing)
async def process_recall_typing_answer(message: Message, state: FSMContext):
    user_answer = message.text.lower().strip()

    state_data = await state.get_data()
    user_id = state_data['user_id']
    correct_english_word = state_data['current_recall_word_en']
    russian_translation = state_data['current_recall_word_ru']
    question_start_time_str = state_data['question_start_time']
    current_date = datetime.datetime.now().isoformat()

    question_start_time = datetime.datetime.fromisoformat(question_start_time_str)
    time_taken = (datetime.datetime.now() - question_start_time).total_seconds()

    if user_answer == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or user_answer == "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
        return

    is_correct = (user_answer == correct_english_word.lower())
    
    feedback_text = ""
    if is_correct:
        feedback_text = (
            f"‚úÖ –í–µ—Ä–Ω–æ! –°–ª–æ–≤–æ: *{correct_english_word.capitalize()}* (–ø–µ—Ä–µ–≤–æ–¥: *{russian_translation}*)\n"
            f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: *{time_taken:.2f}* —Å–µ–∫—É–Ω–¥."
        )
        current_word_set = word_manager.get_user_current_file(int(user_id))
        await update_game_stats(int(user_id), "recall_typing", True, current_date, time_taken=time_taken, word_set_name=current_word_set)
    else:
        feedback_text = (
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: *{correct_english_word.capitalize()}* (–ø–µ—Ä–µ–≤–æ–¥: *{russian_translation}*)\n"
            f"–í–∞—à –æ—Ç–≤–µ—Ç: *{user_answer}*"
        )
        current_word_set = word_manager.get_user_current_file(int(user_id))
        await update_game_stats(int(user_id), "recall_typing", False, current_date, word_set_name=current_word_set)
    
    await message.answer(feedback_text, parse_mode="Markdown")

    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –µ—â–µ —Ä–∞–∑ —Å—ã–≥—Ä–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_game_show_stats"),
             InlineKeyboardButton(text="–î–∞, –µ—â–µ —Ä–∞–∑!", callback_data="play_recall_typing_again")]
        ])
    )

@router.message(F.text == "‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", Games.in_games_menu)
async def back_to_main_from_games(message: Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏–∑ –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ" –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    #await cleanup_guess_audio(message, state, message.bot)
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)

@router.message(F.text == "‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", Games.quiz_guess_word)
async def back_to_main_from_guess_word_game_specific(message: Message, state: FSMContext, bot: Bot):
    # –£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏–∑ –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ" –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await cleanup_guess_audio(message, state, bot)
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
